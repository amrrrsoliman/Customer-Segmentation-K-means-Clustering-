{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":74935,"sourceType":"datasetVersion","datasetId":42674}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"since we added the dataset mall customer ","metadata":{}},{"cell_type":"markdown","source":"so we have to import pandas to manipulate dataset","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nprint(pd.__version__)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:19:56.768753Z","iopub.execute_input":"2025-09-01T19:19:56.769076Z","iopub.status.idle":"2025-09-01T19:19:57.074489Z","shell.execute_reply.started":"2025-09-01T19:19:56.769052Z","shell.execute_reply":"2025-09-01T19:19:57.073638Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"loading dataset ","metadata":{}},{"cell_type":"code","source":"df=pd.read_csv(\"/kaggle/input/customer-segmentation-tutorial-in-python/Mall_Customers.csv\")\ndf.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:21:00.755465Z","iopub.execute_input":"2025-09-01T19:21:00.756339Z","iopub.status.idle":"2025-09-01T19:21:00.798330Z","shell.execute_reply.started":"2025-09-01T19:21:00.756310Z","shell.execute_reply":"2025-09-01T19:21:00.797542Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"displaying description","metadata":{}},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:22:47.794665Z","iopub.execute_input":"2025-09-01T19:22:47.794927Z","iopub.status.idle":"2025-09-01T19:22:47.862535Z","shell.execute_reply.started":"2025-09-01T19:22:47.794908Z","shell.execute_reply":"2025-09-01T19:22:47.861544Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:25:38.259843Z","iopub.execute_input":"2025-09-01T19:25:38.260710Z","iopub.status.idle":"2025-09-01T19:25:38.269547Z","shell.execute_reply.started":"2025-09-01T19:25:38.260669Z","shell.execute_reply":"2025-09-01T19:25:38.268839Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\nafter loading data we can start by the second step which is cleaning data 2-data cleaning \n2-data cleaning \nstarting by checking the null values ","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:27:14.865913Z","iopub.execute_input":"2025-09-01T19:27:14.866214Z","iopub.status.idle":"2025-09-01T19:27:14.873565Z","shell.execute_reply.started":"2025-09-01T19:27:14.866192Z","shell.execute_reply":"2025-09-01T19:27:14.872874Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"check for duplicates ","metadata":{}},{"cell_type":"code","source":"print(\"Number of duplicate rows:\", df.duplicated().sum())\n# Remove duplicates if any\ndf.drop_duplicates(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:29:05.627497Z","iopub.execute_input":"2025-09-01T19:29:05.628136Z","iopub.status.idle":"2025-09-01T19:29:05.636955Z","shell.execute_reply.started":"2025-09-01T19:29:05.628100Z","shell.execute_reply":"2025-09-01T19:29:05.635925Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"checking datatypes of dataset ","metadata":{}},{"cell_type":"code","source":"print(df.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T19:29:51.908156Z","iopub.execute_input":"2025-09-01T19:29:51.908451Z","iopub.status.idle":"2025-09-01T19:29:51.914205Z","shell.execute_reply.started":"2025-09-01T19:29:51.908426Z","shell.execute_reply":"2025-09-01T19:29:51.913359Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"dropping the unwanted features ","metadata":{}},{"cell_type":"code","source":"X = df[['Annual Income (k$)', 'Spending Score (1-100)']].copy()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T20:11:36.516426Z","iopub.execute_input":"2025-09-01T20:11:36.516756Z","iopub.status.idle":"2025-09-01T20:11:36.522665Z","shell.execute_reply.started":"2025-09-01T20:11:36.516729Z","shell.execute_reply":"2025-09-01T20:11:36.521685Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"checking the scale of the features ","metadata":{}},{"cell_type":"code","source":"print(X.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T20:18:30.942406Z","iopub.execute_input":"2025-09-01T20:18:30.942730Z","iopub.status.idle":"2025-09-01T20:18:30.955229Z","shell.execute_reply.started":"2025-09-01T20:18:30.942705Z","shell.execute_reply":"2025-09-01T20:18:30.954375Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"doing scaling for the features (standarization)","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X_scaled[:5])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T20:23:30.427155Z","iopub.execute_input":"2025-09-01T20:23:30.427429Z","iopub.status.idle":"2025-09-01T20:23:30.435139Z","shell.execute_reply.started":"2025-09-01T20:23:30.427410Z","shell.execute_reply":"2025-09-01T20:23:30.434239Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Determine the Optimal Number of Clusters (k)","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\ninertia = []\nK_range = range(1, 11)\nfor k in K_range:\n    km = KMeans(n_clusters=k, random_state=42)\n    km.fit(X_scaled)\n    inertia.append(km.inertia_)\n\nplt.plot(K_range, inertia, 'o-')\nplt.xlabel('Number of clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T20:34:26.324242Z","iopub.execute_input":"2025-09-01T20:34:26.324531Z","iopub.status.idle":"2025-09-01T20:34:27.284820Z","shell.execute_reply.started":"2025-09-01T20:34:26.324510Z","shell.execute_reply":"2025-09-01T20:34:27.284034Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"testing the k means model with various k values from 2-10 , and calc the Silhouette score to know the best value for k","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport matplotlib.pyplot as plt\n\nsilhouette_scores = []\nK_range = range(2, 11)\n\nfor k in K_range:\n    km = KMeans(n_clusters=k, random_state=42)\n    labels = km.fit_predict(X_scaled)\n    score = silhouette_score(X_scaled, labels)\n    silhouette_scores.append(score)\n\n# Plotting\nplt.figure(figsize=(6,4))\nplt.plot(K_range, silhouette_scores, 'o-', color='teal')\nplt.xlabel('Number of clusters k')\nplt.ylabel('Average Silhouette Score')\nplt.title('Silhouette Analysis for K-Means')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T20:52:34.839382Z","iopub.execute_input":"2025-09-01T20:52:34.839750Z","iopub.status.idle":"2025-09-01T20:52:35.237268Z","shell.execute_reply.started":"2025-09-01T20:52:34.839725Z","shell.execute_reply":"2025-09-01T20:52:35.236413Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Fit the Final K-Means Model with k = 4","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\nfinal_k = 4\nkmeans = KMeans(n_clusters=final_k, random_state=42)\ndf['Cluster'] = kmeans.fit_predict(X_scaled)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T20:57:48.123255Z","iopub.execute_input":"2025-09-01T20:57:48.123809Z","iopub.status.idle":"2025-09-01T20:57:48.144602Z","shell.execute_reply.started":"2025-09-01T20:57:48.123782Z","shell.execute_reply":"2025-09-01T20:57:48.143031Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Profile Each Cluster","metadata":{}},{"cell_type":"code","source":"df.groupby('Cluster').agg({\n    'Annual Income (k$)': ['mean', 'count'],\n    'Spending Score (1-100)': 'mean'\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T21:00:12.954905Z","iopub.execute_input":"2025-09-01T21:00:12.955218Z","iopub.status.idle":"2025-09-01T21:00:12.971036Z","shell.execute_reply.started":"2025-09-01T21:00:12.955196Z","shell.execute_reply":"2025-09-01T21:00:12.970194Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"visualizing","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ncenters = kmeans.cluster_centers_\ncenters_original = scaler.inverse_transform(centers)\n\nplt.figure(figsize=(8,6))\nplt.scatter(\n    X['Annual Income (k$)'], X['Spending Score (1-100)'],\n    c=df['Cluster'], cmap='viridis', s=50\n)\nplt.scatter(\n    centers_original[:,0], centers_original[:,1],\n    c='red', marker='X', s=200, label='Centroids'\n)\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1–100)')\nplt.title('Customer Segments (k=4)')\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T21:03:27.097497Z","iopub.execute_input":"2025-09-01T21:03:27.097875Z","iopub.status.idle":"2025-09-01T21:03:27.312046Z","shell.execute_reply.started":"2025-09-01T21:03:27.097832Z","shell.execute_reply":"2025-09-01T21:03:27.311137Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"profile = df.groupby('Cluster').agg(\n  Count=('CustomerID', 'count'),\n  Avg_Income=('Annual Income (k$)', 'mean'),\n  Avg_Spending=('Spending Score (1-100)', 'mean')\n).reset_index()\nprint(profile)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-01T21:05:27.567859Z","iopub.execute_input":"2025-09-01T21:05:27.568173Z","iopub.status.idle":"2025-09-01T21:05:27.621292Z","shell.execute_reply.started":"2025-09-01T21:05:27.568150Z","shell.execute_reply":"2025-09-01T21:05:27.620347Z"}},"outputs":[],"execution_count":null}]}